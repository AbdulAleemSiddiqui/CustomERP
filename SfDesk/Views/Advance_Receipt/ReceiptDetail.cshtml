


<link href="~/assets/css/jsgrid.min.css" rel="stylesheet" />
<link href="~/assets/css/jsgrid-theme.min.css" rel="stylesheet" />
<style>
    .total-row td {
        border-top: 2px solid #efefef;
    }
</style>
<div id="main-content">
    <div class="row">
        <div class="col-lg-12">
            <div class="card alert">
                <div class="jsgrid-table-panel">

                    <div id="adjGrid" class="table table-striped table-bordered dataTable no-footer"></div>

                </div>
                <!-- /# card -->
            </div>
            <!-- /# column -->
        </div>
    </div>
</div>


@*  <script src="~/assets/js/db.js"></script>*@
<script>

        $(document).ready(function () {
            debugger
           // console.log(inventory)
            myy()
            newRow("adjGrid")

    });







    function myy(){

        $("#adjGrid").jsGrid({

            height: "auto",
            width: "100%",
            filtering: false,
            editing: true,
            inserting: false,
            sorting: true,
            paging: true,
            autoload: true,
            pageSize: 15,
            pageButtonCount: 5,
            deleteConfirm: "confirm",
            data: inventory,
            onItemUpdated: function (args) {
                var items = args.grid.option("data");
                debugger;
                allocamount =0
                items.forEach(function (item) {
                    if (item.Amount != undefined)
                    allocamount += parseFloat(item.Amount);

                });

            },
            controller: {
                updateItem: function (insertingClient) {


                    var  due= parseFloat(insertingClient.DueAmount);
                    var total = parseFloat(insertingClient.Amount);
                    if (due < total) {
                        alert("incorrect ammount enter")
                    }
                    else {
                        paydetail.push(insertingClient);
                    }
                },



                deleteItem: function (deletingClient) {
                    paydetail.pop(insertingClient);

                }
            },
            pagerContainer: null,
            pageIndex: 1,
            pageSize: 20,
            pageButtonCount: 15,
            pagerFormat: "Pages: {first} {prev} {pages} {next} {last}    {pageIndex} of {pageCount}",
            pagePrevText: "Prev",
            pageNextText: "Next",
            pageFirstText: "First",
            pageLastText: "Last",
            pageNavigatorNextText: "...",
            pageNavigatorPrevText: "...",

            invalidMessage: "Invalid data entered!",



            fields: [
  {
      name: "isSelected",
      title: "",
      align: "center",
      itemTemplate: function(value, item) {
          return $("<input>").attr("type", "checkbox")
            //.attr("checked", function() {
            //    if (value === false) {
            //        item.uncheck = true;
            //        item.uncheck = item.indeterminate = false;
            //        $(this).prop("checked", false);
            //    } else if (value === true) {
            //        $(this).prop("checked", true);
            //        item.checked = true;
            //        item.uncheck = item.indeterminate = false;
            //    } else {
            //        item.indeterminate = true;
            //        item.checked = item.uncheck = false;
            //        $(this).prop("indeterminate", true);
            //    }
            //})
            //.on("click", function() {
            //    if (item.uncheck === true && item.checked === false && item.indeterminate === false) {
            //        item.indeterminate = true;
            //        item.uncheck = item.checked = false;
            //        $(this).prop("indeterminate", true);
            //    } else if (item.uncheck === false && item.checked === false && item.indeterminate === true) {
            //        item.checked = true;
            //        item.uncheck = item.indeterminate = false;
            //        $(this).prop("checked", true);
            //    } else {
            //        item.uncheck = true;
            //        item.indeterminate = item.checked = false;
            //        $(this).prop("checked", false);
            //    }
            //});
      }},
            {
                name: "SO_NO", title: "Sale order#", type: "text", width: 80, editing: false,

                editTemplate: function (args) {
                    var $editControl = jsGrid.fields.text.prototype.editTemplate.call(this, args);
                    var th = this;
                    update_on_enter($editControl, "adjGrid");
                    return $editControl;
                },
            },
            {
                name: "Date", title: "Date", type: "text", width: 80, editing: false,
                editTemplate: function (args) {
                    var $editControl = jsGrid.fields.text.prototype.editTemplate.call(this, args);
                    var th = this;
                    update_on_enter($editControl, "adjGrid");
                    return $editControl;
                },
            },
            {
                name: "Due_Date", title: "Due Date", type: "text", width: 80, editing: false
            ,
                editTemplate: function (args) {
                    var $editControl = jsGrid.fields.text.prototype.editTemplate.call(this, args);
                    var th = this;
                    update_on_enter($editControl, "adjGrid");
                    return $editControl;
                },
            },

          {
              name: "Total_Amount", title: "Total Amount", type: "text", width: 80, editing: false,
              editTemplate: function (args) {
                  var $editControl = jsGrid.fields.text.prototype.editTemplate.call(this, args);
                  var th = this;
                  update_on_enter($editControl, "adjGrid");
                  return $editControl;
              },
          },
          {
              name: "Adjusted_Amount", title: "Adjusted Amount", type: "text", width: 80, editing: false,
              editTemplate: function (args) {
                  var $editControl = jsGrid.fields.text.prototype.editTemplate.call(this, args);
                  var th = this;
                  update_on_enter($editControl, "adjGrid");
                  return $editControl;
              },
          },
          {
              name: "Balance_Amount", title: "Balance Amount", type: "text", width: 80, editing: false,
              editTemplate: function (args) {
                  var $editControl = jsGrid.fields.text.prototype.editTemplate.call(this, args);
                  var th = this;
                  update_on_enter($editControl, "adjGrid");
                  return $editControl;
              },
          },
          {
              name: "Allocated_Amount", title: "Allocated Amount", type: "text", width: 80, validate: "required",
              insertTemplate: function () {

                  var $insertControl = jsGrid.fields.text.prototype.insertTemplate.call(this);

                  insert_on_enter($insertControl, "adjGrid");
                  return $insertControl;
              },
              editTemplate: function (args) {
                  var $editControl = jsGrid.fields.text.prototype.editTemplate.call(this, args);
                  var th = this;
                  update_on_enter($editControl, "adjGrid");
                  return $editControl;
              },
          },


                   {
                       type: "control",     insertButton: false,
                       itemTemplate: function (_, item) {

                           return jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);
                       }
                   }

            ]

        });
    }
</script>

